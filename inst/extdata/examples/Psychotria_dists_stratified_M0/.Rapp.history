print(timeperiods)#
		print(timepoint)
timeperiods = inputs$timeperiods#
	phy_as_it_is_chopped_down = read.tree(inputs$trfn)#
	plot(phy_as_it_is_chopped_down)#
	abline(v=timeperiods)#
	axisPhylo()#
	# CHECK THIS FUNCTION#
	#phy_as_it_is_chopped_down$edge.length = phy_as_it_is_chopped_down$edge.length + 0.0001#
	tree_sections_list = NULL#
	tnum = 0#
# 	for (i in 1:(length(timeperiods)-1))#
# 	#for (i in 1:3))#
# 		{#
# 		cat("\n", i, ": ", timeperiods[i], "\n", "\n", sep="")#
# 		# Chainsaw the top off the tree#
# 		if (i == 1)#
# 			{#
# 			timepoint = timeperiods[i] - 0#
# 			} else {#
# 			timepoint = timeperiods[i] - timeperiods[i-1]#
# 			}#
# 		# Update timepoints so you are subtracting the right amount!!!!!!!!#
# 		timeperiods = timeperiods - timepoint#
#       timeperiods#
# 		chainsaw_result = chainsaw2(phy_as_it_is_chopped_down, timepoint=timepoint, return_pieces=TRUE)#
# 		print(chainsaw_result)#
# 		#
# 		# Store the chainsaw result#
# 		tree_sections_list[[(tnum=tnum+1)]] = chainsaw_result#
# #
# 		# Convey the tree to the next round of chopping#
# 		phy_as_it_is_chopped_down = chainsaw_result$tree_to_chainsaw#
# #
# 		plot(phy_as_it_is_chopped_down)#
# 		#axisPhylo2(side = 1, roundlabels=TRUE, minage=timeperiods[i] #
# 		axisPhylo()#
# 		#
# 		}#
# #
# #
#
	i = 1#
		cat("\n", i, ": ", timeperiods[i], "\n", "\n", sep="")#
		# Chainsaw the top off the tree#
		if (i == 1)#
			{#
			timepoint = timeperiods[i] - 0#
			} else {#
			timepoint = timeperiods[i] #- timeperiods[i-1]#
			}#
		timeperiods = timeperiods - timepoint#
		print(timeperiods)#
		print(timepoint)#
		chainsaw_result = chainsaw2(phy_as_it_is_chopped_down, timepoint=timepoint, return_pieces=TRUE)#
		#print(chainsaw_result)#
		# Store the chainsaw result#
		tree_sections_list[[(tnum=tnum+1)]] = chainsaw_result#
#
		# Convey the tree to the next round of chopping#
		phy_as_it_is_chopped_down = chainsaw_result$tree_to_chainsaw#
#
		plot(phy_as_it_is_chopped_down)#
		#axisPhylo2(side = 1, roundlabels=TRUE, minage=timeperiods[i] #
		axisPhylo()#
#
	i = 2#
		cat("\n", i, ": ", timeperiods[i], "\n", "\n", sep="")#
		# Chainsaw the top off the tree#
		if (i == 1)#
			{#
			timepoint = timeperiods[i] - 0#
			} else {#
			timepoint = timeperiods[i] #- timeperiods[i-1]#
			}#
		chainsaw_result = chainsaw2(phy_as_it_is_chopped_down, timepoint=timepoint, return_pieces=TRUE)#
		#print(chainsaw_result)#
		# Store the chainsaw result#
		tree_sections_list[[(tnum=tnum+1)]] = chainsaw_result#
#
		# Convey the tree to the next round of chopping#
		phy_as_it_is_chopped_down = chainsaw_result$tree_to_chainsaw#
#
		plot(phy_as_it_is_chopped_down)#
		#axisPhylo2(side = 1, roundlabels=TRUE, minage=timeperiods[i] #
		axisPhylo()#
	i = 3#
		cat("\n", i, ": ", timeperiods[i], "\n", "\n", sep="")#
		# Chainsaw the top off the tree#
		if (i == 1)#
			{#
			timepoint = timeperiods[i] - 0#
			} else {#
			timepoint = timeperiods[i] #- timeperiods[i-1]#
			}#
		chainsaw_result = chainsaw2(phy_as_it_is_chopped_down, timepoint=timepoint, return_pieces=TRUE)#
		#print(chainsaw_result)#
		# Store the chainsaw result#
		tree_sections_list[[(tnum=tnum+1)]] = chainsaw_result#
#
		# Convey the tree to the next round of chopping#
		phy_as_it_is_chopped_down = chainsaw_result$tree_to_chainsaw#
#
		plot(phy_as_it_is_chopped_down)#
		#axisPhylo2(side = 1, roundlabels=TRUE, minage=timeperiods[i] #
		axisPhylo()#
	i = 4#
		cat("\n", i, ": ", timeperiods[i], "\n", "\n", sep="")#
		# Chainsaw the top off the tree#
		if (i == 1)#
			{#
			timepoint = timeperiods[i] - 0#
			} else {#
			timepoint = timeperiods[i] #- timeperiods[i-1]#
			}#
		chainsaw_result = chainsaw2(phy_as_it_is_chopped_down, timepoint=timepoint, return_pieces=TRUE)#
		#print(chainsaw_result)#
		# Store the chainsaw result#
		tree_sections_list[[(tnum=tnum+1)]] = chainsaw_result#
#
		# Convey the tree to the next round of chopping#
		phy_as_it_is_chopped_down = chainsaw_result$tree_to_chainsaw#
#
		plot(phy_as_it_is_chopped_down)#
		#axisPhylo2(side = 1, roundlabels=TRUE, minage=timeperiods[i] #
		axisPhylo()#
			i = 5#
		cat("\n", i, ": ", timeperiods[i], "\n", "\n", sep="")#
		# Chainsaw the top off the tree#
		if (i == 1)#
			{#
			timepoint = timeperiods[i] - 0#
			} else {#
			timepoint = timeperiods[i]# - timeperiods[i-1]#
			}#
		chainsaw_result = chainsaw2(phy_as_it_is_chopped_down, timepoint=timepoint, return_pieces=TRUE)#
		#print(chainsaw_result)#
		# Store the chainsaw result#
		tree_sections_list[[(tnum=tnum+1)]] = chainsaw_result#
#
		# Convey the tree to the next round of chopping#
		phy_as_it_is_chopped_down = chainsaw_result$tree_to_chainsaw#
#
		plot(phy_as_it_is_chopped_down)#
		#axisPhylo2(side = 1, roundlabels=TRUE, minage=timeperiods[i] #
		axisPhylo()
timeperiods = inputs$timeperiods#
	phy_as_it_is_chopped_down = read.tree(inputs$trfn)#
	plot(phy_as_it_is_chopped_down)#
	abline(v=timeperiods)#
	axisPhylo()#
	# CHECK THIS FUNCTION#
	#phy_as_it_is_chopped_down$edge.length = phy_as_it_is_chopped_down$edge.length + 0.0001#
	tree_sections_list = NULL#
	tnum = 0#
# 	for (i in 1:(length(timeperiods)-1))#
# 	#for (i in 1:3))#
# 		{#
# 		cat("\n", i, ": ", timeperiods[i], "\n", "\n", sep="")#
# 		# Chainsaw the top off the tree#
# 		if (i == 1)#
# 			{#
# 			timepoint = timeperiods[i] - 0#
# 			} else {#
# 			timepoint = timeperiods[i] - timeperiods[i-1]#
# 			}#
# 		# Update timepoints so you are subtracting the right amount!!!!!!!!#
# 		timeperiods = timeperiods - timepoint#
#       timeperiods#
# 		chainsaw_result = chainsaw2(phy_as_it_is_chopped_down, timepoint=timepoint, return_pieces=TRUE)#
# 		print(chainsaw_result)#
# 		#
# 		# Store the chainsaw result#
# 		tree_sections_list[[(tnum=tnum+1)]] = chainsaw_result#
# #
# 		# Convey the tree to the next round of chopping#
# 		phy_as_it_is_chopped_down = chainsaw_result$tree_to_chainsaw#
# #
# 		plot(phy_as_it_is_chopped_down)#
# 		#axisPhylo2(side = 1, roundlabels=TRUE, minage=timeperiods[i] #
# 		axisPhylo()#
# 		#
# 		}#
# #
# #
#
	i = 1#
		cat("\n", i, ": ", timeperiods[i], "\n", "\n", sep="")#
		# Chainsaw the top off the tree#
		if (i == 1)#
			{#
			timepoint = timeperiods[i] - 0#
			} else {#
			timepoint = timeperiods[i] #- timeperiods[i-1]#
			}#
		timeperiods = timeperiods - timepoint#
		print(timeperiods)#
		print(timepoint)#
		chainsaw_result = chainsaw2(phy_as_it_is_chopped_down, timepoint=timepoint, return_pieces=TRUE)#
		#print(chainsaw_result)#
		# Store the chainsaw result#
		tree_sections_list[[(tnum=tnum+1)]] = chainsaw_result#
#
		# Convey the tree to the next round of chopping#
		phy_as_it_is_chopped_down = chainsaw_result$tree_to_chainsaw#
#
		plot(phy_as_it_is_chopped_down)#
		#axisPhylo2(side = 1, roundlabels=TRUE, minage=timeperiods[i] #
		axisPhylo()#
#
	i = 2#
		cat("\n", i, ": ", timeperiods[i], "\n", "\n", sep="")#
		# Chainsaw the top off the tree#
		if (i == 1)#
			{#
			timepoint = timeperiods[i] - 0#
			} else {#
			timepoint = timeperiods[i] #- timeperiods[i-1]#
			}#
		timeperiods = timeperiods - timepoint#
		print(timeperiods)#
		print(timepoint)#
		chainsaw_result = chainsaw2(phy_as_it_is_chopped_down, timepoint=timepoint, return_pieces=TRUE)#
		#print(chainsaw_result)#
		# Store the chainsaw result#
		tree_sections_list[[(tnum=tnum+1)]] = chainsaw_result#
#
		# Convey the tree to the next round of chopping#
		phy_as_it_is_chopped_down = chainsaw_result$tree_to_chainsaw#
#
		plot(phy_as_it_is_chopped_down)#
		#axisPhylo2(side = 1, roundlabels=TRUE, minage=timeperiods[i] #
		axisPhylo()#
	i = 3#
		cat("\n", i, ": ", timeperiods[i], "\n", "\n", sep="")#
		# Chainsaw the top off the tree#
		if (i == 1)#
			{#
			timepoint = timeperiods[i] - 0#
			} else {#
			timepoint = timeperiods[i] #- timeperiods[i-1]#
			}#
		timeperiods = timeperiods - timepoint#
		print(timeperiods)#
		print(timepoint)#
		chainsaw_result = chainsaw2(phy_as_it_is_chopped_down, timepoint=timepoint, return_pieces=TRUE)#
		#print(chainsaw_result)#
		# Store the chainsaw result#
		tree_sections_list[[(tnum=tnum+1)]] = chainsaw_result#
#
		# Convey the tree to the next round of chopping#
		phy_as_it_is_chopped_down = chainsaw_result$tree_to_chainsaw#
#
		plot(phy_as_it_is_chopped_down)#
		#axisPhylo2(side = 1, roundlabels=TRUE, minage=timeperiods[i] #
		axisPhylo()#
	i = 4#
		cat("\n", i, ": ", timeperiods[i], "\n", "\n", sep="")#
		# Chainsaw the top off the tree#
		if (i == 1)#
			{#
			timepoint = timeperiods[i] - 0#
			} else {#
			timepoint = timeperiods[i] #- timeperiods[i-1]#
			}#
		timeperiods = timeperiods - timepoint#
		print(timeperiods)#
		print(timepoint)#
		chainsaw_result = chainsaw2(phy_as_it_is_chopped_down, timepoint=timepoint, return_pieces=TRUE)#
		#print(chainsaw_result)#
		# Store the chainsaw result#
		tree_sections_list[[(tnum=tnum+1)]] = chainsaw_result#
#
		# Convey the tree to the next round of chopping#
		phy_as_it_is_chopped_down = chainsaw_result$tree_to_chainsaw#
#
		plot(phy_as_it_is_chopped_down)#
		#axisPhylo2(side = 1, roundlabels=TRUE, minage=timeperiods[i] #
		axisPhylo()#
			i = 5#
		cat("\n", i, ": ", timeperiods[i], "\n", "\n", sep="")#
		# Chainsaw the top off the tree#
		if (i == 1)#
			{#
			timepoint = timeperiods[i] - 0#
			} else {#
			timepoint = timeperiods[i]# - timeperiods[i-1]#
			}#
		timeperiods = timeperiods - timepoint#
		print(timeperiods)#
		print(timepoint)#
		chainsaw_result = chainsaw2(phy_as_it_is_chopped_down, timepoint=timepoint, return_pieces=TRUE)#
		#print(chainsaw_result)#
		# Store the chainsaw result#
		tree_sections_list[[(tnum=tnum+1)]] = chainsaw_result#
#
		# Convey the tree to the next round of chopping#
		phy_as_it_is_chopped_down = chainsaw_result$tree_to_chainsaw#
#
		plot(phy_as_it_is_chopped_down)#
		#axisPhylo2(side = 1, roundlabels=TRUE, minage=timeperiods[i] #
		axisPhylo()
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)
Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)
timepoints
timeperiods = inputs$timeperiods
timeperiods
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)
9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
bears_2param_standard_fast_result$optim_result
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=FALSE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL#
bears_2param_standard_fast_result$optim_result
prt(phy)
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=FALSE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
phy$root.edge
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=FALSE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
bears_strat_run = bears_optim_run(BioGeoBEARS_run_object = inputs)
getwd()
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL#
bears_2param_standard_fast_result$optim_result#
bears_strat_run = bears_optim_run(BioGeoBEARS_run_object = inputs)
independent_likelihoods_at_branch_section_bottom
independent_likelihoods_at_branch_section_bottom = expokit_dgpadm_Qmat(Qmat=Qmat_tmp,  t=treepiece, transpose_needed=TRUE)
expokit_dgpadm_Qmat(Qmat=Qmat_tmp,  t=treepiece, transpose_needed=TRUE)
expokit_dgpadm_Qmat(Qmat=Qmat_tmp,  t=treepiece, transpose_needed=FALSE)
independent_likelihoods_at_branch_section_bottom = expokit_dgpadm_Qmat(Qmat=Qmat_tmp,  t=treepiece, transpose_needed=TRUE)
rowSums(independent_likelihoods_at_branch_section_bottom)
independent_likelihoods_at_branch_section_bottom = expokit_dgpadm_Qmat(Qmat=Qmat_tmp,  t=treepiece, transpose_needed=FALSE)
rowSums(independent_likelihoods_at_branch_section_bottom)
independent_likelihoods_at_branch_section_bottom = expokit_dgpadm_Qmat(Qmat=Qmat_tmp,  t=treepiece, transpose_needed=FALSE)
matrix(independent_likelihoods_at_branch_section_bottom %*% relative_probs_of_each_state_at_the_tip_of_this_branch, nrow=1)
conditional_likelihoods_at_branch_section_bottom = matrix(independent_likelihoods_at_branch_section_bottom %*% relative_probs_of_each_state_at_the_tip_of_this_branch, nrow=1)
conditional_likelihoods_at_branch_section_bottom
sum(conditional_likelihoods_at_branch_section_bottom)
independent_likelihoods_at_branch_section_bottom = expokit_dgpadm_Qmat(Qmat=Qmat_tmp,  t=treepiece, transpose_needed=TRUE)
independent_likelihoods_at_branch_section_bottom
conditional_likelihoods_at_branch_section_bottom = matrix(independent_likelihoods_at_branch_section_bottom %*% relative_probs_of_each_state_at_the_tip_of_this_branch, nrow=1)
conditional_likelihoods_at_branch_section_bottom
rowSums
sum(conditional_likelihoods_at_branch_section_bottom)
expokit_dgpadm_Qmat2(times=treepiece, Qmat=Qmat_tmp,  transpose_needed=TRUE)
independent_likelihoods_at_branch_section_bottom = expokit_dgpadm_Qmat2(times=treepiece, Qmat=Qmat_tmp,  transpose_needed=TRUE)
conditional_likelihoods_at_branch_section_bottom = matrix(independent_likelihoods_at_branch_section_bottom %*% relative_probs_of_each_state_at_the_tip_of_this_branch, nrow=1)
conditional_likelihoods_at_branch_section_bottom
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL#
bears_2param_standard_fast_result$optim_result#
bears_strat_run = bears_optim_run(BioGeoBEARS_run_object = inputs)
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.2#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.24#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
bears_strat_run = bears_optim_run(BioGeoBEARS_run_object = inputs)
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
cl = c(0, 0.0004497578, 0.0004497578, 0.8733181, 0.0004497578, 9.110437e-05, 0.08823157, 9.110437e-05, 0.08823157, 9.110437e-05, 0.08823157, 0.008967543, 1.3924e-05, 0.008967543, 0.008967543, 0.0009169129)#
sum(cl)#
#
sum(log(cl))
cl = c(0, 0.0004497578, 0.0004497578, 0.8733181, 0.0004497578, 9.110437e-05, 0.08823157, 9.110437e-05, 0.08823157, 9.110437e-05, 0.08823157, 0.008967543, 1.3924e-05, 0.008967543, 0.008967543, 0.0009169129)#
sum(cl)#
#
log(sum(cl))
Qmat=NULL; spPmat=NULL; min_branchlength=1e-21; return_what="loglike"; probs_of_states_at_root=NULL; rootedge=FALSE; sparse=FALSE; printlevel=1; use_cpp=TRUE; input_is_COO=FALSE; spPmat_inputs=NULL; cppSpMethod=3; cluster_already_open=NULL; calc_ancprobs=FALSE; null_range_allowed=TRUE; fixnode=NULL; fixlikes=NULL; inputs=inputs; allareas=allareas; all_states_list=all_states_list#
	maxareas = 4#
	phy = read.tree(inputs$trfn)#
	tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
	tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
	allareas = getareas_from_tipranges_object(tipranges)#
	all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
	tmpres = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="all", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)
Get the timeperiods; if 1 time period, run once; if multiple, run #
	if (is.null(inputs$timeperiods) || length(inputs$timeperiods) == 1)#
		{#
		num_iterations = 1#
		} else {#
		# Multiple timeperiods#
		timeperiods = inputs$timeperiods#
		num_iterations = length(timeperiods)-1#
		}#
	# All areas in the total analysis#
	allareas=allareas#
	allareas_list = seq(0, length(allareas)-1, 1)		# 0-base indexes#
#
	# All states in the total analysis (after e.g. limitation on total # of areas)#
	all_states_list=all_states_list	#
	# Other variables#
	BioGeoBEARS_model_object = inputs$BioGeoBEARS_model_object#
	force_sparse = sparse#
	########################################################
	# Set up the starting probabilities etc.#
	########################################################
	# Starting tip_relative_probs_of_each_state#
	current_condlikes_row = 0#
	tip_relative_probs_of_each_state = tip_condlikes_of_data_on_each_state#
	tip_relative_probs_of_each_state#
	current_tip_relative_probs_of_each_state = tip_relative_probs_of_each_state#
	current_condlikes_row = nrow(current_tip_relative_probs_of_each_state)#
	# matrix to hold all of the relative probabilities; Making this purposely too big#
	numnodes = phy$Nnode + length(phy$tip.label)#
	all_relative_probs_of_each_state = matrix(0, ncol=length(all_states_list), nrow=(numnodes*length(timeperiods)))#
	all_condlikes_of_each_state = matrix(0, ncol=length(all_states_list), nrow=(numnodes*length(timeperiods)))#
	all_relative_probs_of_each_state[1:current_condlikes_row, ] = current_tip_relative_probs_of_each_state#
	all_condlikes_of_each_state[1:current_condlikes_row, ] = current_tip_relative_probs_of_each_state#
	########################################################
	# Take the original tree and scale the branchlengths by b (branch-length exponent)#
	# b=0, all branches=1; b=1, all branches normal#
	########################################################
	previous_timepoint = 0#
	original_phy = phy#
	b_branch_length_exponent = inputs$BioGeoBEARS_model_object@params_table["b", "est"]#
	#original_phy$edge.length = original_phy$edge.length ^ b_branch_length_exponent#
	phy_as_it_is_chopped_down = original_phy
i=1
jj=1
Cut down the number of areas, by what is allowed#
		areas_allowed_mat = inputs$list_of_areas_allowed_mats[[i]]#
#
		states_allowed_TF = sapply(X=all_states_list, FUN=check_if_state_is_allowed, areas_allowed_mat)#
		#states_to_use_TF = all_states_list %in% tmp_states_list#
		states_to_use_TF = states_allowed_TF#
		# States allowed in this timeperiod#
		states_list = all_states_list[states_allowed_TF]#
		# Add back NULL range, if needed#
		if (null_range_allowed == TRUE)#
			{#
			states_list = c(NA, states_list)#
			states_to_use_TF[1] = TRUE#
			}#
		# Make the dedf matrix for this time period#
		dispersal_multipliers_matrix = inputs$list_of_dispersal_multipliers_mats[[i]]#
		distances_mat = inputs$list_of_distances_mats[[i]]#
		x_exponent = inputs$BioGeoBEARS_model_object@params_table["x", "est"]#
		dispersal_multipliers_matrix = make_dispersal_multiplier_matrix(areas=allareas, states_list=NULL, dispersal_multipliers_matrix=dispersal_multipliers_matrix, distances_mat=distances_mat, x_exponent=x_exponent)#
		d_current = inputs$BioGeoBEARS_model_object@params_table["d", "est"]#
		dmat = d_current * dispersal_multipliers_matrix#
		#print(dmat)#
		# Calculate the extinction (local extipration) probability multipliers#
		area_of_areas = inputs$list_of_area_of_areas[[i]]#
		# Check elist for 0s#
		if (any(elist <= 0))#
			{#
			stop("ERROR: Minimum distance between regions must be >= 1; correct this.\n\n", sep="")#
			}#
		u_extirpation_exponent = inputs$BioGeoBEARS_model_object@params_table["u", "est"]#
		e_current = inputs$BioGeoBEARS_model_object@params_table["e", "est"]#
		elist = e_current * (area_of_areas ^ (-1 * u_extirpation_exponent))#
		#print(elist)#
		# Calculate the Q matrix#
		# someday we'll have to put "a" (anagenic range-switching) in here...#
		if (is.null(Qmat))#
			{#
			Qmat_tmp = rcpp_states_list_to_DEmat(areas_list=allareas_list, states_list=states_list, dmat=dmat, elist=elist, include_null_range=TRUE, normalize_TF=TRUE, makeCOO_TF=force_sparse)#
			} else {#
			# If Qmat is pre-specified#
			Qmat_tmp = Qmat#
			}#
		# Now. IF you have a subtree structure, you need to run this with a cladogenesis matrix, #
		# through calc_loglike_sp(), like normal.#
		# If there's just one tree, store it in the object#
		if (is.null(inputs$timeperiods) || length(inputs$timeperiods) == 1)#
			{#
			tr = read.tree(inputs$trfn)#
			tree_to_chainsaw = NULL#
			tree_to_chainsaw[[1]] = tr#
#
			return_pieces_list = NULL#
			return_pieces_list[[1]] = tr#
			return_pieces_basenames = NULL#
			return_pieces_basenames[[1]] = paste(sort(tr$tip.label), collapse="|", sep="")#
			chainsaw_object = list()#
			chainsaw_object$tree_to_chainsaw = tree_to_chainsaw#
			chainsaw_object$return_pieces_list = return_pieces_list#
			chainsaw_object$return_pieces_basenames = return_pieces_basenames#
			attr(chainsaw_object, "class") = "chainsaw_result"#
			inputs$tree_sections_list[[1]] = chainsaw_object#
			}#
		# OK, if you have a tree here, do that#
		# if not, exp the branch#
		########################################################
		# Cladogenic model #
		########################################################
		j = BioGeoBEARS_model_object@params_table["j","est"]#
		ysv = BioGeoBEARS_model_object@params_table["ys","est"]#
		v = BioGeoBEARS_model_object@params_table["v","est"]#
		ys = BioGeoBEARS_model_object@params_table["ys","est"]#
		sum_SPweights = ys + j + v#
		maxent_constraint_01 = BioGeoBEARS_model_object@params_table["mx01","est"]#
		# Text version of speciation matrix	#
		maxent_constraint_01v = BioGeoBEARS_model_object@params_table["mx01v","est"]#
		#spPmat = symbolic_to_relprob_matrix_sp(spmat, cellsplit="\\+", mergesym="*", ys=ys, j=j, v=v, maxent_constraint_01=maxent_constraint_01, maxent_constraint_01v=maxent_constraint_01v, max_numareas=max_numareas)#
		# Set the parameter controlling the size distribution of #
		# the smaller descendant species#
		maxent01s_param = BioGeoBEARS_model_object@params_table["mx01s","est"]#
		maxent01v_param = BioGeoBEARS_model_object@params_table["mx01v","est"]#
		maxent01j_param = BioGeoBEARS_model_object@params_table["mx01j","est"]#
		maxent01y_param = BioGeoBEARS_model_object@params_table["mx01y","est"]#
		# Cladogenesis model inputs#
		spPmat_inputs = NULL#
		states_indices = states_list#
		states_indices[1] = NULL	# shorten the states_indices by 1 (cutting the null range state from the speciation matrix)#
		spPmat_inputs$l = states_indices#
		spPmat_inputs$s = ys#
		spPmat_inputs$v = v#
		spPmat_inputs$j = j#
		spPmat_inputs$y = ys#
		spPmat_inputs$dmat = dmat#
		spPmat_inputs$maxent01s_param = maxent01s_param#
		spPmat_inputs$maxent01v_param = maxent01v_param#
		spPmat_inputs$maxent01j_param = maxent01j_param#
		spPmat_inputs$maxent01y_param = maxent01y_param#
		########################################################
		# Go through the tree pieces#
		########################################################
		chainsaw_result = inputs$tree_sections_list[[i]]#
		# You will need the new tip likelihoods of the new tree:#
		current_tip_relative_probs_of_each_state#
		new_tip_likelihoods = matrix(0, nrow=length(chainsaw_result$return_pieces_list), ncol=length(all_states_list))
new_tip_likelihoods
treepiece = chainsaw_result$return_pieces_list[[jj]]
treepiece
tipname = chainsaw_result$return_pieces_basenames[[jj]]#
				tip_TF = phy_as_it_is_chopped_down$tip.label == tipname#
				relative_probs_of_each_state_at_the_tip_of_this_branch = current_tip_relative_probs_of_each_state[tip_TF, states_to_use_TF]#
				# t = treepiece#
				independent_likelihoods_at_branch_section_bottom = expokit_dgpadm_Qmat2(times=treepiece, Qmat=Qmat_tmp,  transpose_needed=TRUE)
independent_likelihoods_at_branch_section_bottom
conditional_likelihoods_at_branch_section_bottom = matrix(independent_likelihoods_at_branch_section_bottom %*% relative_probs_of_each_state_at_the_tip_of_this_branch, nrow=1)
conditional_likelihoods_at_branch_section_bottom
sum(conditional_likelihoods_at_branch_section_bottom)
relative_probs_of_each_state_at_the_tip_of_this_branch
independent_likelihoods_at_branch_section_bottom %*% relative_probs_of_each_state_at_the_tip_of_this_branch
sum(independent_likelihoods_at_branch_section_bottom %*% relative_probs_of_each_state_at_the_tip_of_this_branch#
)
expokit_dgpadm_Qmat(Qmat=Qmat_tmp,  t=treepiece, transpose_needed=FALSE)
t = treepiece#
				independent_likelihoods_at_branch_section_bottom = expokit_dgpadm_Qmat2(times=treepiece, Qmat=Qmat_tmp,  transpose_needed=TRUE)#
				independent_likelihoods_at_branch_section_bottom = expokit_dgpadm_Qmat(Qmat=Qmat_tmp,  t=treepiece, transpose_needed=FALSE)#
				conditional_likelihoods_at_branch_section_bottom = matrix(independent_likelihoods_at_branch_section_bottom %*% relative_probs_of_each_state_at_the_tip_of_this_branch, nrow=1)#
				conditional_likelihoods_at_branch_section_bottom
sum(conditional_likelihoods_at_branch_section_bottom)
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
# inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
# inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
# inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
# inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
tmp_tipnums
inputs$tree_sections_list
inputs = section_the_tree(inputs)
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214
timeperiods = inputs$timeperiods#
	phy_as_it_is_chopped_down = read.tree(inputs$trfn)#
	plot(phy_as_it_is_chopped_down)#
	abline(v=timeperiods)#
	axisPhylo()#
	# CHECK THIS FUNCTION#
	#phy_as_it_is_chopped_down$edge.length = phy_as_it_is_chopped_down$edge.length + 0.0001#
	tree_sections_list = NULL#
	tnum = 0
for (i in 1:(length(timeperiods)-1))#
	#for (i in 1:3))#
		{#
		cat("\n", i, ": ", timeperiods[i], "\n", "\n", sep="")#
		# Chainsaw the top off the tree#
		if (i == 1)#
			{#
			timepoint = timeperiods[i] - 0#
			} else {#
			timepoint = timeperiods[i]# - timeperiods[i-1]#
			}#
		# Update timepoints so you are subtracting the right amount!!!!!!!!#
		timeperiods = timeperiods - timepoint#
      timeperiods#
		chainsaw_result = chainsaw2(phy_as_it_is_chopped_down, timepoint=timepoint, return_pieces=TRUE)#
		#print(chainsaw_result)#
		# Store the chainsaw result#
		tree_sections_list[[(tnum=tnum+1)]] = chainsaw_result#
#
		# Convey the tree to the next round of chopping#
		phy_as_it_is_chopped_down = chainsaw_result$tree_to_chainsaw#
#
		plot(phy_as_it_is_chopped_down)#
		#axisPhylo2(side = 1, roundlabels=TRUE, minage=timeperiods[i] #
		axisPhylo()#
		}
nodes_to_chainsaw
i
cat("\n", i, ": ", timeperiods[i], "\n", "\n", sep="")#
		# Chainsaw the top off the tree#
		if (i == 1)#
			{#
			timepoint = timeperiods[i] - 0#
			} else {#
			timepoint = timeperiods[i]# - timeperiods[i-1]#
			}#
		# Update timepoints so you are subtracting the right amount!!!!!!!!#
		timeperiods = timeperiods - timepoint#
      timeperiods#
		chainsaw_result = chainsaw2(phy_as_it_is_chopped_down, timepoint=timepoint, return_pieces=TRUE)
chainsaw_result
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list
9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
trfn
getwd()
list.files()
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs
bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list
9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)
inputs$trfn
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
Get the timeperiods; if 1 time period, run once; if multiple, run #
	if (is.null(inputs$timeperiods) || length(inputs$timeperiods) == 1)#
		{#
		num_iterations = 1#
		} else {#
		# Multiple timeperiods#
		timeperiods = inputs$timeperiods#
		num_iterations = length(timeperiods)-1#
		}#
	# All areas in the total analysis#
	allareas=allareas#
	allareas_list = seq(0, length(allareas)-1, 1)		# 0-base indexes#
#
	# All states in the total analysis (after e.g. limitation on total # of areas)#
	all_states_list=all_states_list	#
	# Other variables#
	BioGeoBEARS_model_object = inputs$BioGeoBEARS_model_object#
	force_sparse = sparse#
	########################################################
	# Set up the starting probabilities etc.#
	########################################################
	# Starting tip_relative_probs_of_each_state#
	current_condlikes_row = 0#
	tip_relative_probs_of_each_state = tip_condlikes_of_data_on_each_state#
	tip_relative_probs_of_each_state#
	current_tip_relative_probs_of_each_state = tip_relative_probs_of_each_state#
	current_condlikes_row = nrow(current_tip_relative_probs_of_each_state)#
	# matrix to hold all of the relative probabilities; Making this purposely too big#
	numnodes = phy$Nnode + length(phy$tip.label)#
	all_relative_probs_of_each_state = matrix(0, ncol=length(all_states_list), nrow=(numnodes*length(timeperiods)))#
	all_condlikes_of_each_state = matrix(0, ncol=length(all_states_list), nrow=(numnodes*length(timeperiods)))#
	all_relative_probs_of_each_state[1:current_condlikes_row, ] = current_tip_relative_probs_of_each_state#
	all_condlikes_of_each_state[1:current_condlikes_row, ] = current_tip_relative_probs_of_each_state#
	########################################################
	# Take the original tree and scale the branchlengths by b (branch-length exponent)#
	# b=0, all branches=1; b=1, all branches normal#
	########################################################
	previous_timepoint = 0#
	original_phy = phy#
	b_branch_length_exponent = inputs$BioGeoBEARS_model_object@params_table["b", "est"]#
	#original_phy$edge.length = original_phy$edge.length ^ b_branch_length_exponent#
	phy_as_it_is_chopped_down = original_phy
i
cat("\ni=",i, sep="")#
#
		# Cut down the number of areas, by what is allowed#
		areas_allowed_mat = inputs$list_of_areas_allowed_mats[[i]]#
#
		states_allowed_TF = sapply(X=all_states_list, FUN=check_if_state_is_allowed, areas_allowed_mat)#
		#states_to_use_TF = all_states_list %in% tmp_states_list#
		states_to_use_TF = states_allowed_TF#
		# States allowed in this timeperiod#
		states_list = all_states_list[states_allowed_TF]#
		# Add back NULL range, if needed#
		if (null_range_allowed == TRUE)#
			{#
			states_list = c(NA, states_list)#
			states_to_use_TF[1] = TRUE#
			}#
		# Make the dedf matrix for this time period#
		dispersal_multipliers_matrix = inputs$list_of_dispersal_multipliers_mats[[i]]#
		distances_mat = inputs$list_of_distances_mats[[i]]#
		x_exponent = inputs$BioGeoBEARS_model_object@params_table["x", "est"]#
		dispersal_multipliers_matrix = make_dispersal_multiplier_matrix(areas=allareas, states_list=NULL, dispersal_multipliers_matrix=dispersal_multipliers_matrix, distances_mat=distances_mat, x_exponent=x_exponent)#
		d_current = inputs$BioGeoBEARS_model_object@params_table["d", "est"]#
		dmat = d_current * dispersal_multipliers_matrix#
		#print(dmat)#
		# Calculate the extinction (local extipration) probability multipliers#
		area_of_areas = inputs$list_of_area_of_areas[[i]]#
		# Check elist for 0s#
		if (any(elist <= 0))#
			{#
			stop("ERROR: Minimum distance between regions must be >= 1; correct this.\n\n", sep="")#
			}#
		u_extirpation_exponent = inputs$BioGeoBEARS_model_object@params_table["u", "est"]#
		e_current = inputs$BioGeoBEARS_model_object@params_table["e", "est"]#
		elist = e_current * (area_of_areas ^ (-1 * u_extirpation_exponent))#
		#print(elist)#
		# Calculate the Q matrix#
		# someday we'll have to put "a" (anagenic range-switching) in here...#
		if (is.null(Qmat))#
			{#
			Qmat_tmp = rcpp_states_list_to_DEmat(areas_list=allareas_list, states_list=states_list, dmat=dmat, elist=elist, include_null_range=TRUE, normalize_TF=TRUE, makeCOO_TF=force_sparse)#
			} else {#
			# If Qmat is pre-specified#
			Qmat_tmp = Qmat#
			}#
		# Now. IF you have a subtree structure, you need to run this with a cladogenesis matrix, #
		# through calc_loglike_sp(), like normal.#
		# If there's just one tree, store it in the object#
		if (is.null(inputs$timeperiods) || length(inputs$timeperiods) == 1)#
			{#
			tr = read.tree(inputs$trfn)#
			tree_to_chainsaw = NULL#
			tree_to_chainsaw[[1]] = tr#
#
			return_pieces_list = NULL#
			return_pieces_list[[1]] = tr#
			return_pieces_basenames = NULL#
			return_pieces_basenames[[1]] = paste(sort(tr$tip.label), collapse="|", sep="")#
			chainsaw_object = list()#
			chainsaw_object$tree_to_chainsaw = tree_to_chainsaw#
			chainsaw_object$return_pieces_list = return_pieces_list#
			chainsaw_object$return_pieces_basenames = return_pieces_basenames#
			attr(chainsaw_object, "class") = "chainsaw_result"#
			inputs$tree_sections_list[[1]] = chainsaw_object#
			}#
		# OK, if you have a tree here, do that#
		# if not, exp the branch#
		########################################################
		# Cladogenic model #
		########################################################
		j = BioGeoBEARS_model_object@params_table["j","est"]#
		ysv = BioGeoBEARS_model_object@params_table["ys","est"]#
		v = BioGeoBEARS_model_object@params_table["v","est"]#
		ys = BioGeoBEARS_model_object@params_table["ys","est"]#
		sum_SPweights = ys + j + v#
		maxent_constraint_01 = BioGeoBEARS_model_object@params_table["mx01","est"]#
		# Text version of speciation matrix	#
		maxent_constraint_01v = BioGeoBEARS_model_object@params_table["mx01v","est"]#
		#spPmat = symbolic_to_relprob_matrix_sp(spmat, cellsplit="\\+", mergesym="*", ys=ys, j=j, v=v, maxent_constraint_01=maxent_constraint_01, maxent_constraint_01v=maxent_constraint_01v, max_numareas=max_numareas)#
		# Set the parameter controlling the size distribution of #
		# the smaller descendant species#
		maxent01s_param = BioGeoBEARS_model_object@params_table["mx01s","est"]#
		maxent01v_param = BioGeoBEARS_model_object@params_table["mx01v","est"]#
		maxent01j_param = BioGeoBEARS_model_object@params_table["mx01j","est"]#
		maxent01y_param = BioGeoBEARS_model_object@params_table["mx01y","est"]#
		# Cladogenesis model inputs#
		spPmat_inputs = NULL#
		states_indices = states_list#
		states_indices[1] = NULL	# shorten the states_indices by 1 (cutting the null range state from the speciation matrix)#
		spPmat_inputs$l = states_indices#
		spPmat_inputs$s = ys#
		spPmat_inputs$v = v#
		spPmat_inputs$j = j#
		spPmat_inputs$y = ys#
		spPmat_inputs$dmat = dmat#
		spPmat_inputs$maxent01s_param = maxent01s_param#
		spPmat_inputs$maxent01v_param = maxent01v_param#
		spPmat_inputs$maxent01j_param = maxent01j_param#
		spPmat_inputs$maxent01y_param = maxent01y_param#
		########################################################
		# Go through the tree pieces#
		########################################################
		chainsaw_result = inputs$tree_sections_list[[i]]#
		# You will need the new tip likelihoods of the new tree:#
		current_tip_relative_probs_of_each_state#
		new_tip_likelihoods = matrix(0, nrow=length(chainsaw_result$return_pieces_list), ncol=length(all_states_list))
jj
cat("\njj=",jj, sep="")#
			treepiece = chainsaw_result$return_pieces_list[[jj]]
treepiece
is.numeric(treepiece)
Otherwise, treepiece is a subtree#
				tmp_subtree = treepiece#
				# Get the names of the tips in this subtree#
				tipnames = tmp_subtree$tip.label#
				# Use the tipnames to get the conditional likelihoods at these tips#
				tips_for_subtree_TF = phy_as_it_is_chopped_down$tip.label %in% tipnames#
				subtree_tip_relative_probs_of_each_state = current_tip_relative_probs_of_each_state[tips_for_subtree_TF,states_to_use_TF]
subtree_tip_relative_probs_of_each_state
Calculate the likelihoods for this subtree#
				calc_loglike_sp_results = calc_loglike_sp(#
					tip_condlikes_of_data_on_each_state=subtree_tip_relative_probs_of_each_state, #
					phy=tmp_subtree, #
					Qmat=Qmat_tmp, #
					spPmat=NULL,#
					return_what="all",#
					probs_of_states_at_root=NULL,#
					rootedge=TRUE,#
					sparse=FALSE, #
					printlevel=printlevel,#
					use_cpp=TRUE,#
					input_is_COO=FALSE,#
					spPmat_inputs=spPmat_inputs,#
					cppSpMethod=cppSpMethod,#
					cluster_already_open=cluster_already_open,#
					calc_ancprobs=FALSE,#
					null_range_allowed=null_range_allowed,#
					fixnode=NULL,#
					fixlikes=NULL#
					)
tmp_tipnums = 1:length(tipnames)#
				chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]] = calc_loglike_sp_results$condlikes_of_each_state#[-tmp_tipnums, ]
Relative probabilities -- all nodes plus branch bottom (jjust branch bottom, here)#
				chainsaw_result$relative_probabilities_for_nodes_plus_bottom_in_this_section[[jj]] = calc_loglike_sp_results$relative_probs_of_each_state_at_branch_top_AT_node_DOWNPASS#[-tmp_tipnums, ]#
				# Relative probabilities -- jjust the new tip#
				chainsaw_result$relative_probs_of_each_state_at_bottom_of_root_branch[[jj]] = calc_loglike_sp_results$relative_probs_of_each_state_at_bottom_of_root_branch
Also, store the relative probabilities for the new tip#
			#new_tip_likelihoods[jj, states_to_use_TF] = chainsaw_result$relative_probs_of_each_state_at_bottom_of_root_branch[[jj]]#
			new_tip_likelihoods[jj, states_to_use_TF] = chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]][nrow(chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]]), ]
Add these to the overall list of conditional likelihoods#
			numrows_to_add = nrow(chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]])#
			startrow = current_condlikes_row + 1#
			endrow = current_condlikes_row + numrows_to_add#
			all_relative_probs_of_each_state[startrow:endrow, states_to_use_TF] = chainsaw_result$relative_probabilities_for_nodes_plus_bottom_in_this_section[[jj]]
chainsaw_result$relative_probabilities_for_nodes_plus_bottom_in_this_section[[jj]]
dim(chainsaw_result$relative_probabilities_for_nodes_plus_bottom_in_this_section[[jj]]#
)
startrow
endrow
length(20:56)
all_relative_probs_of_each_state[startrow:endrow, states_to_use_TF]
dim(all_relative_probs_of_each_state)
numrows_to_add
current_condlikes_row
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL#
bears_2param_standard_fast_result$optim_result#
bears_strat_run = bears_optim_run(BioGeoBEARS_run_object = inputs)
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL#
bears_2param_standard_fast_result$optim_result#
bears_strat_run = bears_optim_run(BioGeoBEARS_run_object = inputs)
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
inputs$timeperiods
inputs
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
inputs
timeperiods = inputs$timeperiods#
	phy_as_it_is_chopped_down = read.tree(inputs$trfn)#
	plot(phy_as_it_is_chopped_down)#
	abline(v=timeperiods)#
	axisPhylo()
timeperiods
tree_sections_list = NULL#
	tnum = 0
i
{#
			cat("\n", i, ": ", timeperiods[i], "\n", "\n", sep="")#
			# Chainsaw the top off the tree#
			if (i == 1)#
				{#
				timepoint = timeperiods[i] - 0#
				} else {#
				timepoint = timeperiods[i]# - timeperiods[i-1]#
				}#
			# Update timepoints so you are subtracting the right amount!!!!!!!!#
			timeperiods = timeperiods - timepoint#
		  timeperiods
}
chainsaw_result = chainsaw2(phy_as_it_is_chopped_down, timepoint=timepoint, return_pieces=TRUE)
chainsaw_result
timepoint
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs
bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list
inputs
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=FALSE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=FALSE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=FALSE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=FALSE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=FALSE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=FALSE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=FALSE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
35.00547 - 0.4623413
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=FALSE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]] = calc_loglike_sp_results$condlikes_of_each_state[-tmp_tipnums, ]
chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]] = calc_loglike_sp_results$condlikes_of_each_state[-tmp_tipnums, ]
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=FALSE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=FALSE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
tmpLnL + 0.4623413
Get the timeperiods; if 1 time period, run once; if multiple, run #
	if (is.null(inputs$timeperiods) || length(inputs$timeperiods) == 1)#
		{#
		num_iterations = 1#
		} else {#
		# Multiple timeperiods#
		timeperiods = inputs$timeperiods#
		num_iterations = length(timeperiods)#
		}#
	# All areas in the total analysis#
	allareas=allareas#
	allareas_list = seq(0, length(allareas)-1, 1)		# 0-base indexes#
#
	# All states in the total analysis (after e.g. limitation on total # of areas)#
	all_states_list=all_states_list	#
	# Other variables#
	BioGeoBEARS_model_object = inputs$BioGeoBEARS_model_object#
	force_sparse = sparse#
	########################################################
	# Set up the starting probabilities etc.#
	########################################################
	# Starting tip_relative_probs_of_each_state#
	current_condlikes_row = 0#
	tip_relative_probs_of_each_state = tip_condlikes_of_data_on_each_state#
	tip_relative_probs_of_each_state#
	current_tip_relative_probs_of_each_state = tip_relative_probs_of_each_state#
	current_condlikes_row = nrow(current_tip_relative_probs_of_each_state)#
	# matrix to hold all of the relative probabilities; Making this purposely too big#
	numnodes = phy$Nnode + length(phy$tip.label)#
	all_relative_probs_of_each_state = matrix(0, ncol=length(all_states_list), nrow=(numnodes*length(timeperiods)))#
	all_condlikes_of_each_state = matrix(0, ncol=length(all_states_list), nrow=(numnodes*length(timeperiods)))#
	all_relative_probs_of_each_state[1:current_condlikes_row, ] = current_tip_relative_probs_of_each_state#
	all_condlikes_of_each_state[1:current_condlikes_row, ] = current_tip_relative_probs_of_each_state#
	########################################################
	# Take the original tree and scale the branchlengths by b (branch-length exponent)#
	# b=0, all branches=1; b=1, all branches normal#
	########################################################
	previous_timepoint = 0#
	original_phy = phy#
	b_branch_length_exponent = inputs$BioGeoBEARS_model_object@params_table["b", "est"]#
	#original_phy$edge.length = original_phy$edge.length ^ b_branch_length_exponent#
	phy_as_it_is_chopped_down = original_phy#
#
	tiplikes_to_delete = list()#
	for (i in 1:num_iterations)#
		{#
		cat("\ni=",i, sep="")#
#
		# Cut down the number of areas, by what is allowed#
		areas_allowed_mat = inputs$list_of_areas_allowed_mats[[i]]#
#
		states_allowed_TF = sapply(X=all_states_list, FUN=check_if_state_is_allowed, areas_allowed_mat)#
		#states_to_use_TF = all_states_list %in% tmp_states_list#
		states_to_use_TF = states_allowed_TF#
		# States allowed in this timeperiod#
		states_list = all_states_list[states_allowed_TF]#
		# Add back NULL range, if needed#
		if (null_range_allowed == TRUE)#
			{#
			states_list = c(NA, states_list)#
			states_to_use_TF[1] = TRUE#
			}#
		# Make the dedf matrix for this time period#
		dispersal_multipliers_matrix = inputs$list_of_dispersal_multipliers_mats[[i]]#
		distances_mat = inputs$list_of_distances_mats[[i]]#
		x_exponent = inputs$BioGeoBEARS_model_object@params_table["x", "est"]#
		dispersal_multipliers_matrix = make_dispersal_multiplier_matrix(areas=allareas, states_list=NULL, dispersal_multipliers_matrix=dispersal_multipliers_matrix, distances_mat=distances_mat, x_exponent=x_exponent)#
		d_current = inputs$BioGeoBEARS_model_object@params_table["d", "est"]#
		dmat = d_current * dispersal_multipliers_matrix#
		#print(dmat)#
		# Calculate the extinction (local extipration) probability multipliers#
		area_of_areas = inputs$list_of_area_of_areas[[i]]#
		# Check elist for 0s#
		if (any(elist <= 0))#
			{#
			stop("ERROR: Minimum distance between regions must be >= 1; correct this.\n\n", sep="")#
			}#
		u_extirpation_exponent = inputs$BioGeoBEARS_model_object@params_table["u", "est"]#
		e_current = inputs$BioGeoBEARS_model_object@params_table["e", "est"]#
		elist = e_current * (area_of_areas ^ (-1 * u_extirpation_exponent))#
		#print(elist)#
		# Calculate the Q matrix#
		# someday we'll have to put "a" (anagenic range-switching) in here...#
		if (is.null(Qmat))#
			{#
			Qmat_tmp = rcpp_states_list_to_DEmat(areas_list=allareas_list, states_list=states_list, dmat=dmat, elist=elist, include_null_range=TRUE, normalize_TF=TRUE, makeCOO_TF=force_sparse)#
			} else {#
			# If Qmat is pre-specified#
			Qmat_tmp = Qmat#
			}#
		# Now. IF you have a subtree structure, you need to run this with a cladogenesis matrix, #
		# through calc_loglike_sp(), like normal.#
		# If there's just one tree, store it in the object#
		if (is.null(inputs$timeperiods) || length(inputs$timeperiods) == 1)#
			{#
			tr = read.tree(inputs$trfn)#
			tree_to_chainsaw = NULL#
			tree_to_chainsaw[[1]] = tr#
#
			return_pieces_list = NULL#
			return_pieces_list[[1]] = tr#
			return_pieces_basenames = NULL#
			return_pieces_basenames[[1]] = paste(sort(tr$tip.label), collapse="|", sep="")#
			chainsaw_object = list()#
			chainsaw_object$tree_to_chainsaw = tree_to_chainsaw#
			chainsaw_object$return_pieces_list = return_pieces_list#
			chainsaw_object$return_pieces_basenames = return_pieces_basenames#
			attr(chainsaw_object, "class") = "chainsaw_result"#
			inputs$tree_sections_list[[1]] = chainsaw_object#
			}#
		# OK, if you have a tree here, do that#
		# if not, exp the branch#
		########################################################
		# Cladogenic model #
		########################################################
		j = BioGeoBEARS_model_object@params_table["j","est"]#
		ysv = BioGeoBEARS_model_object@params_table["ys","est"]#
		v = BioGeoBEARS_model_object@params_table["v","est"]#
		ys = BioGeoBEARS_model_object@params_table["ys","est"]#
		sum_SPweights = ys + j + v#
		maxent_constraint_01 = BioGeoBEARS_model_object@params_table["mx01","est"]#
		# Text version of speciation matrix	#
		maxent_constraint_01v = BioGeoBEARS_model_object@params_table["mx01v","est"]#
		#spPmat = symbolic_to_relprob_matrix_sp(spmat, cellsplit="\\+", mergesym="*", ys=ys, j=j, v=v, maxent_constraint_01=maxent_constraint_01, maxent_constraint_01v=maxent_constraint_01v, max_numareas=max_numareas)#
		# Set the parameter controlling the size distribution of #
		# the smaller descendant species#
		maxent01s_param = BioGeoBEARS_model_object@params_table["mx01s","est"]#
		maxent01v_param = BioGeoBEARS_model_object@params_table["mx01v","est"]#
		maxent01j_param = BioGeoBEARS_model_object@params_table["mx01j","est"]#
		maxent01y_param = BioGeoBEARS_model_object@params_table["mx01y","est"]#
		# Cladogenesis model inputs#
		spPmat_inputs = NULL#
		states_indices = states_list#
		states_indices[1] = NULL	# shorten the states_indices by 1 (cutting the null range state from the speciation matrix)#
		spPmat_inputs$l = states_indices#
		spPmat_inputs$s = ys#
		spPmat_inputs$v = v#
		spPmat_inputs$j = j#
		spPmat_inputs$y = ys#
		spPmat_inputs$dmat = dmat#
		spPmat_inputs$maxent01s_param = maxent01s_param#
		spPmat_inputs$maxent01v_param = maxent01v_param#
		spPmat_inputs$maxent01j_param = maxent01j_param#
		spPmat_inputs$maxent01y_param = maxent01y_param#
		########################################################
		# Go through the tree pieces#
		########################################################
		chainsaw_result = inputs$tree_sections_list[[i]]#
		# You will need the new tip likelihoods of the new tree:#
		current_tip_relative_probs_of_each_state#
		new_tip_likelihoods = matrix(0, nrow=length(chainsaw_result$return_pieces_list), ncol=length(all_states_list))#
#
		for (jj in 1:length(chainsaw_result$return_pieces_list))#
			{#
			cat("\njj=",jj, sep="")#
			treepiece = chainsaw_result$return_pieces_list[[jj]]#
			# If it's jjust a branch section#
			if (is.numeric(treepiece))#
				{#
				tipname = chainsaw_result$return_pieces_basenames[[jj]]#
				tip_TF = phy_as_it_is_chopped_down$tip.label == tipname#
				relative_probs_of_each_state_at_the_tip_of_this_branch = current_tip_relative_probs_of_each_state[tip_TF, states_to_use_TF]#
				# t = treepiece#
				independent_likelihoods_at_branch_section_bottom = expokit_dgpadm_Qmat2(times=treepiece, Qmat=Qmat_tmp,  transpose_needed=TRUE)#
				#independent_likelihoods_at_branch_section_bottom = expokit_dgpadm_Qmat(Qmat=Qmat_tmp,  t=treepiece, transpose_needed=FALSE)#
				conditional_likelihoods_at_branch_section_bottom = matrix(independent_likelihoods_at_branch_section_bottom %*% relative_probs_of_each_state_at_the_tip_of_this_branch, nrow=1)#
				# Test forward exponentiation instead...NO#
				# independent_likelihoods_at_branch_section_bottom = expokit_dgpadm_Qmat2(times=treepiece, Qmat=Qmat_tmp,  transpose_needed=FALSE)#
# 				#independent_likelihoods_at_branch_section_bottom = expokit_dgpadm_Qmat(Qmat=Qmat_tmp,  t=treepiece, transpose_needed=FALSE)#
# 				#
# 				#
# 				conditional_likelihoods_at_branch_section_bottom = matrix(independent_likelihoods_at_branch_section_bottom %*% relative_probs_of_each_state_at_the_tip_of_this_branch, nrow=1)#
# 				conditional_likelihoods_at_branch_section_bottom[1] = 0#
# 				#
				# Also, store the conditional likelihoods for all nodes in this subtree#
				chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]] = conditional_likelihoods_at_branch_section_bottom#
				# Relative probabilities -- jjust the new tip#
				chainsaw_result$relative_probs_of_each_state_at_bottom_of_root_branch[[jj]] = conditional_likelihoods_at_branch_section_bottom / sum(conditional_likelihoods_at_branch_section_bottom)#
				# Relative probabilities -- all nodes plus branch bottom (jjust branch bottom, here)#
				chainsaw_result$relative_probabilities_for_nodes_plus_bottom_in_this_section[[jj]] = conditional_likelihoods_at_branch_section_bottom / sum(conditional_likelihoods_at_branch_section_bottom)#
				} else {#
				# Otherwise, treepiece is a subtree#
				tmp_subtree = treepiece#
				# Get the names of the tips in this subtree#
				tipnames = tmp_subtree$tip.label#
				# Use the tipnames to get the conditional likelihoods at these tips#
				tips_for_subtree_TF = phy_as_it_is_chopped_down$tip.label %in% tipnames#
				subtree_tip_relative_probs_of_each_state = current_tip_relative_probs_of_each_state[tips_for_subtree_TF,states_to_use_TF]#
				# Calculate the likelihoods for this subtree#
				calc_loglike_sp_results = calc_loglike_sp(#
					tip_condlikes_of_data_on_each_state=subtree_tip_relative_probs_of_each_state, #
					phy=tmp_subtree, #
					Qmat=Qmat_tmp, #
					spPmat=NULL,#
					return_what="all",#
					probs_of_states_at_root=NULL,#
					rootedge=TRUE,#
					sparse=FALSE, #
					printlevel=printlevel,#
					use_cpp=TRUE,#
					input_is_COO=FALSE,#
					spPmat_inputs=spPmat_inputs,#
					cppSpMethod=cppSpMethod,#
					cluster_already_open=cluster_already_open,#
					calc_ancprobs=FALSE,#
					null_range_allowed=null_range_allowed,#
					fixnode=NULL,#
					fixlikes=NULL#
					)#
				#chainsaw_result$conditional_likelihoods_at_branch_section_bottom[[jj]] = #
				# Also, store the conditional likelihoods for all nodes in this subtree#
				# MINUS THE GODDAMN TIPS OF THE SUBTREE, THESE ARE ALREADY IN THERE#
				tmp_tipnums = 1:length(tipnames)#
				chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]] = calc_loglike_sp_results$condlikes_of_each_state[-tmp_tipnums, ]#
				# Matrix of tip likelihoods to delete so you don't repeat using them in the total#
				# loglike#
				tiplikes_to_delete[[jj]] = calc_loglike_sp_results$condlikes_of_each_state[tmp_tipnums, ]#
				# Relative probabilities -- all nodes plus branch bottom (jjust branch bottom, here)#
				chainsaw_result$relative_probabilities_for_nodes_plus_bottom_in_this_section[[jj]] = calc_loglike_sp_results$relative_probs_of_each_state_at_branch_top_AT_node_DOWNPASS[-tmp_tipnums, ]#
				# Relative probabilities -- jjust the new tip#
				chainsaw_result$relative_probs_of_each_state_at_bottom_of_root_branch[[jj]] = calc_loglike_sp_results$relative_probs_of_each_state_at_bottom_of_root_branch#
				} # End if/then on branch vs. subtree#
			# Also, store the relative probabilities for the new tip#
			#new_tip_likelihoods[jj, states_to_use_TF] = chainsaw_result$relative_probs_of_each_state_at_bottom_of_root_branch[[jj]]#
			new_tip_likelihoods[jj, states_to_use_TF] = chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]][nrow(chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]]), ]#
			# Add these to the overall list of conditional likelihoods#
			numrows_to_add = nrow(chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]])#
			startrow = current_condlikes_row + 1#
			endrow = current_condlikes_row + numrows_to_add#
			all_relative_probs_of_each_state[startrow:endrow, states_to_use_TF] = chainsaw_result$relative_probabilities_for_nodes_plus_bottom_in_this_section[[jj]]#
			all_condlikes_of_each_state[startrow:endrow, states_to_use_TF] = chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]]#
			print(chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]])#
			print(log(sum(chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]])))#
			rowSums(all_condlikes_of_each_state) != 0#
			tmp_all_condlikes_of_each_state = all_condlikes_of_each_state[rowSums(all_condlikes_of_each_state) != 0,]#
			currLnL = sum(log(rowSums(tmp_all_condlikes_of_each_state)))#
			cat("i=", i, "; jj=", jj, "; currLnL=", currLnL, "\n")#
			current_condlikes_row = current_condlikes_row + numrows_to_add#
			} # End loop through jj tree pieces WITHIN a stratum#
		# Update for the next loop#
		# Tip likelihoods#
		current_tip_relative_probs_of_each_state = new_tip_likelihoods#
		# Store previous round#
		#old_phy_as_it_is_chopped_down = phy_as_it_is_chopped_down#
		#old_chainsaw_result = chainsaw_result#
		#old_new_tip_likelihoods = new_tip_likelihoods#
		# Convey the tree to the next iteration#
		phy_as_it_is_chopped_down = chainsaw_result$tree_to_chainsaw#
#
		} # End loop through i strata
rowSums(all_condlikes_of_each_state) != 0#
	final_all_condlikes_of_each_state = all_condlikes_of_each_state[rowSums(all_condlikes_of_each_state) != 0,]
grand_total_likelihood = sum(log(rowSums(final_all_condlikes_of_each_state)))#
		grand_total_likelihood
final_all_condlikes_of_each_state
19+18+18
dim(final_all_condlikes_of_each_state)
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=FALSE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
bears_strat_run = bears_optim_run(BioGeoBEARS_run_object = inputs)
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs
bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list
9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
Get the timeperiods; if 1 time period, run once; if multiple, run #
	if (is.null(inputs$timeperiods) || length(inputs$timeperiods) == 1)#
		{#
		num_iterations = 1#
		} else {#
		# Multiple timeperiods#
		timeperiods = inputs$timeperiods#
		num_iterations = length(timeperiods)#
		}#
	# All areas in the total analysis#
	allareas=allareas#
	allareas_list = seq(0, length(allareas)-1, 1)		# 0-base indexes#
#
	# All states in the total analysis (after e.g. limitation on total # of areas)#
	all_states_list=all_states_list	#
	# Other variables#
	BioGeoBEARS_model_object = inputs$BioGeoBEARS_model_object#
	force_sparse = sparse#
	########################################################
	# Set up the starting probabilities etc.#
	########################################################
	# Starting tip_relative_probs_of_each_state#
	current_condlikes_row = 0#
	tip_relative_probs_of_each_state = tip_condlikes_of_data_on_each_state#
	tip_relative_probs_of_each_state#
	current_tip_relative_probs_of_each_state = tip_relative_probs_of_each_state#
	current_condlikes_row = nrow(current_tip_relative_probs_of_each_state)#
	# matrix to hold all of the relative probabilities; Making this purposely too big#
	numnodes = phy$Nnode + length(phy$tip.label)#
	all_relative_probs_of_each_state = matrix(0, ncol=length(all_states_list), nrow=(numnodes*length(timeperiods)))#
	all_condlikes_of_each_state = matrix(0, ncol=length(all_states_list), nrow=(numnodes*length(timeperiods)))#
	all_relative_probs_of_each_state[1:current_condlikes_row, ] = current_tip_relative_probs_of_each_state#
	all_condlikes_of_each_state[1:current_condlikes_row, ] = current_tip_relative_probs_of_each_state#
	########################################################
	# Take the original tree and scale the branchlengths by b (branch-length exponent)#
	# b=0, all branches=1; b=1, all branches normal#
	########################################################
	previous_timepoint = 0#
	original_phy = phy#
	b_branch_length_exponent = inputs$BioGeoBEARS_model_object@params_table["b", "est"]#
	#original_phy$edge.length = original_phy$edge.length ^ b_branch_length_exponent#
	phy_as_it_is_chopped_down = original_phy#
#
	tiplikes_to_delete = list()#
	for (i in 1:num_iterations)#
		{#
		cat("\ni=",i, sep="")#
#
		# Cut down the number of areas, by what is allowed#
		areas_allowed_mat = inputs$list_of_areas_allowed_mats[[i]]#
#
		states_allowed_TF = sapply(X=all_states_list, FUN=check_if_state_is_allowed, areas_allowed_mat)#
		#states_to_use_TF = all_states_list %in% tmp_states_list#
		states_to_use_TF = states_allowed_TF#
		# States allowed in this timeperiod#
		states_list = all_states_list[states_allowed_TF]#
		# Add back NULL range, if needed#
		if (null_range_allowed == TRUE)#
			{#
			states_list = c(NA, states_list)#
			states_to_use_TF[1] = TRUE#
			}#
		# Make the dedf matrix for this time period#
		dispersal_multipliers_matrix = inputs$list_of_dispersal_multipliers_mats[[i]]#
		distances_mat = inputs$list_of_distances_mats[[i]]#
		x_exponent = inputs$BioGeoBEARS_model_object@params_table["x", "est"]#
		dispersal_multipliers_matrix = make_dispersal_multiplier_matrix(areas=allareas, states_list=NULL, dispersal_multipliers_matrix=dispersal_multipliers_matrix, distances_mat=distances_mat, x_exponent=x_exponent)#
		d_current = inputs$BioGeoBEARS_model_object@params_table["d", "est"]#
		dmat = d_current * dispersal_multipliers_matrix#
		#print(dmat)#
		# Calculate the extinction (local extipration) probability multipliers#
		area_of_areas = inputs$list_of_area_of_areas[[i]]#
		# Check elist for 0s#
		if (any(elist <= 0))#
			{#
			stop("ERROR: Minimum distance between regions must be >= 1; correct this.\n\n", sep="")#
			}#
		u_extirpation_exponent = inputs$BioGeoBEARS_model_object@params_table["u", "est"]#
		e_current = inputs$BioGeoBEARS_model_object@params_table["e", "est"]#
		elist = e_current * (area_of_areas ^ (-1 * u_extirpation_exponent))#
		#print(elist)#
		# Calculate the Q matrix#
		# someday we'll have to put "a" (anagenic range-switching) in here...#
		if (is.null(Qmat))#
			{#
			Qmat_tmp = rcpp_states_list_to_DEmat(areas_list=allareas_list, states_list=states_list, dmat=dmat, elist=elist, include_null_range=TRUE, normalize_TF=TRUE, makeCOO_TF=force_sparse)#
			} else {#
			# If Qmat is pre-specified#
			Qmat_tmp = Qmat#
			}#
		# Now. IF you have a subtree structure, you need to run this with a cladogenesis matrix, #
		# through calc_loglike_sp(), like normal.#
		# If there's just one tree, store it in the object#
		if (is.null(inputs$timeperiods) || length(inputs$timeperiods) == 1)#
			{#
			tr = read.tree(inputs$trfn)#
			tree_to_chainsaw = NULL#
			tree_to_chainsaw[[1]] = tr#
#
			return_pieces_list = NULL#
			return_pieces_list[[1]] = tr#
			return_pieces_basenames = NULL#
			return_pieces_basenames[[1]] = paste(sort(tr$tip.label), collapse="|", sep="")#
			chainsaw_object = list()#
			chainsaw_object$tree_to_chainsaw = tree_to_chainsaw#
			chainsaw_object$return_pieces_list = return_pieces_list#
			chainsaw_object$return_pieces_basenames = return_pieces_basenames#
			attr(chainsaw_object, "class") = "chainsaw_result"#
			inputs$tree_sections_list[[1]] = chainsaw_object#
			}#
		# OK, if you have a tree here, do that#
		# if not, exp the branch#
		########################################################
		# Cladogenic model #
		########################################################
		j = BioGeoBEARS_model_object@params_table["j","est"]#
		ysv = BioGeoBEARS_model_object@params_table["ys","est"]#
		v = BioGeoBEARS_model_object@params_table["v","est"]#
		ys = BioGeoBEARS_model_object@params_table["ys","est"]#
		sum_SPweights = ys + j + v#
		maxent_constraint_01 = BioGeoBEARS_model_object@params_table["mx01","est"]#
		# Text version of speciation matrix	#
		maxent_constraint_01v = BioGeoBEARS_model_object@params_table["mx01v","est"]#
		#spPmat = symbolic_to_relprob_matrix_sp(spmat, cellsplit="\\+", mergesym="*", ys=ys, j=j, v=v, maxent_constraint_01=maxent_constraint_01, maxent_constraint_01v=maxent_constraint_01v, max_numareas=max_numareas)#
		# Set the parameter controlling the size distribution of #
		# the smaller descendant species#
		maxent01s_param = BioGeoBEARS_model_object@params_table["mx01s","est"]#
		maxent01v_param = BioGeoBEARS_model_object@params_table["mx01v","est"]#
		maxent01j_param = BioGeoBEARS_model_object@params_table["mx01j","est"]#
		maxent01y_param = BioGeoBEARS_model_object@params_table["mx01y","est"]#
		# Cladogenesis model inputs#
		spPmat_inputs = NULL#
		states_indices = states_list#
		states_indices[1] = NULL	# shorten the states_indices by 1 (cutting the null range state from the speciation matrix)#
		spPmat_inputs$l = states_indices#
		spPmat_inputs$s = ys#
		spPmat_inputs$v = v#
		spPmat_inputs$j = j#
		spPmat_inputs$y = ys#
		spPmat_inputs$dmat = dmat#
		spPmat_inputs$maxent01s_param = maxent01s_param#
		spPmat_inputs$maxent01v_param = maxent01v_param#
		spPmat_inputs$maxent01j_param = maxent01j_param#
		spPmat_inputs$maxent01y_param = maxent01y_param#
		########################################################
		# Go through the tree pieces#
		########################################################
		chainsaw_result = inputs$tree_sections_list[[i]]#
		# You will need the new tip likelihoods of the new tree:#
		current_tip_relative_probs_of_each_state#
		new_tip_likelihoods = matrix(0, nrow=length(chainsaw_result$return_pieces_list), ncol=length(all_states_list))#
#
		for (jj in 1:length(chainsaw_result$return_pieces_list))#
			{#
			cat("\njj=",jj, sep="")#
			treepiece = chainsaw_result$return_pieces_list[[jj]]#
			# If it's jjust a branch section#
			if (is.numeric(treepiece))#
				{#
				tipname = chainsaw_result$return_pieces_basenames[[jj]]#
				tip_TF = phy_as_it_is_chopped_down$tip.label == tipname#
				relative_probs_of_each_state_at_the_tip_of_this_branch = current_tip_relative_probs_of_each_state[tip_TF, states_to_use_TF]#
				# t = treepiece#
				independent_likelihoods_at_branch_section_bottom = expokit_dgpadm_Qmat2(times=treepiece, Qmat=Qmat_tmp,  transpose_needed=TRUE)#
				#independent_likelihoods_at_branch_section_bottom = expokit_dgpadm_Qmat(Qmat=Qmat_tmp,  t=treepiece, transpose_needed=FALSE)#
				conditional_likelihoods_at_branch_section_bottom = matrix(independent_likelihoods_at_branch_section_bottom %*% relative_probs_of_each_state_at_the_tip_of_this_branch, nrow=1)#
				# Test forward exponentiation instead...NO#
				# independent_likelihoods_at_branch_section_bottom = expokit_dgpadm_Qmat2(times=treepiece, Qmat=Qmat_tmp,  transpose_needed=FALSE)#
# 				#independent_likelihoods_at_branch_section_bottom = expokit_dgpadm_Qmat(Qmat=Qmat_tmp,  t=treepiece, transpose_needed=FALSE)#
# 				#
# 				#
# 				conditional_likelihoods_at_branch_section_bottom = matrix(independent_likelihoods_at_branch_section_bottom %*% relative_probs_of_each_state_at_the_tip_of_this_branch, nrow=1)#
# 				conditional_likelihoods_at_branch_section_bottom[1] = 0#
# 				#
				# Also, store the conditional likelihoods for all nodes in this subtree#
				chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]] = conditional_likelihoods_at_branch_section_bottom#
				# Relative probabilities -- jjust the new tip#
				chainsaw_result$relative_probs_of_each_state_at_bottom_of_root_branch[[jj]] = conditional_likelihoods_at_branch_section_bottom / sum(conditional_likelihoods_at_branch_section_bottom)#
				# Relative probabilities -- all nodes plus branch bottom (jjust branch bottom, here)#
				chainsaw_result$relative_probabilities_for_nodes_plus_bottom_in_this_section[[jj]] = conditional_likelihoods_at_branch_section_bottom / sum(conditional_likelihoods_at_branch_section_bottom)#
				} else {#
				# Otherwise, treepiece is a subtree#
				tmp_subtree = treepiece#
				# Get the names of the tips in this subtree#
				tipnames = tmp_subtree$tip.label#
				# Use the tipnames to get the conditional likelihoods at these tips#
				tips_for_subtree_TF = phy_as_it_is_chopped_down$tip.label %in% tipnames#
				subtree_tip_relative_probs_of_each_state = current_tip_relative_probs_of_each_state[tips_for_subtree_TF,states_to_use_TF]#
				# Calculate the likelihoods for this subtree#
				calc_loglike_sp_results = calc_loglike_sp(#
					tip_condlikes_of_data_on_each_state=subtree_tip_relative_probs_of_each_state, #
					phy=tmp_subtree, #
					Qmat=Qmat_tmp, #
					spPmat=NULL,#
					return_what="all",#
					probs_of_states_at_root=NULL,#
					rootedge=TRUE,#
					sparse=FALSE, #
					printlevel=printlevel,#
					use_cpp=TRUE,#
					input_is_COO=FALSE,#
					spPmat_inputs=spPmat_inputs,#
					cppSpMethod=cppSpMethod,#
					cluster_already_open=cluster_already_open,#
					calc_ancprobs=FALSE,#
					null_range_allowed=null_range_allowed,#
					fixnode=NULL,#
					fixlikes=NULL#
					)#
				#chainsaw_result$conditional_likelihoods_at_branch_section_bottom[[jj]] = #
				# Also, store the conditional likelihoods for all nodes in this subtree#
				# MINUS THE GODDAMN TIPS OF THE SUBTREE, THESE ARE ALREADY IN THERE#
				tmp_tipnums = 1:length(tipnames)#
				chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]] = calc_loglike_sp_results$condlikes_of_each_state[-tmp_tipnums, ]#
				# Matrix of tip likelihoods to delete so you don't repeat using them in the total#
				# loglike#
				tiplikes_to_delete[[jj]] = calc_loglike_sp_results$condlikes_of_each_state[tmp_tipnums, ]#
				# Relative probabilities -- all nodes plus branch bottom (jjust branch bottom, here)#
				chainsaw_result$relative_probabilities_for_nodes_plus_bottom_in_this_section[[jj]] = calc_loglike_sp_results$relative_probs_of_each_state_at_branch_top_AT_node_DOWNPASS[-tmp_tipnums, ]#
				# Relative probabilities -- jjust the new tip#
				chainsaw_result$relative_probs_of_each_state_at_bottom_of_root_branch[[jj]] = calc_loglike_sp_results$relative_probs_of_each_state_at_bottom_of_root_branch#
				# ONLY for the nodes in original tree, store the condlikes#
				# Add these to the overall list of conditional likelihoods#
				numrows_to_add = nrow(chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]])#
				startrow = current_condlikes_row + 1#
				endrow = current_condlikes_row + numrows_to_add#
				all_relative_probs_of_each_state[startrow:endrow, states_to_use_TF] = chainsaw_result$relative_probabilities_for_nodes_plus_bottom_in_this_section[[jj]]#
				all_condlikes_of_each_state[startrow:endrow, states_to_use_TF] = chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]]#
#
				current_condlikes_row = current_condlikes_row + numrows_to_add#
				} # End if/then on branch vs. subtree#
			# Also, store the relative probabilities for the new tip#
			#new_tip_likelihoods[jj, states_to_use_TF] = chainsaw_result$relative_probs_of_each_state_at_bottom_of_root_branch[[jj]]#
			new_tip_likelihoods[jj, states_to_use_TF] = chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]][nrow(chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]]), ]#
# Add these to the overall list of conditional likelihoods#
# 			numrows_to_add = nrow(chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]])#
# 			#
# 			startrow = current_condlikes_row + 1#
# 			endrow = current_condlikes_row + numrows_to_add#
# 			all_relative_probs_of_each_state[startrow:endrow, states_to_use_TF] = chainsaw_result$relative_probabilities_for_nodes_plus_bottom_in_this_section[[jj]]#
# 			#
# 			all_condlikes_of_each_state[startrow:endrow, states_to_use_TF] = chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]]#
			#print(chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]])#
			#print(log(sum(chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]])))#
			rowSums(all_condlikes_of_each_state) != 0#
			tmp_all_condlikes_of_each_state = all_condlikes_of_each_state[rowSums(all_condlikes_of_each_state) != 0,]#
			currLnL = sum(log(rowSums(tmp_all_condlikes_of_each_state)))#
			cat("i=", i, "; jj=", jj, "; currLnL=", currLnL, "\n")#
# 			current_condlikes_row = current_condlikes_row + numrows_to_add#
			} # End loop through jj tree pieces WITHIN a stratum#
		# Update for the next loop#
		# Tip likelihoods#
		current_tip_relative_probs_of_each_state = new_tip_likelihoods#
		# Store previous round#
		#old_phy_as_it_is_chopped_down = phy_as_it_is_chopped_down#
		#old_chainsaw_result = chainsaw_result#
		#old_new_tip_likelihoods = new_tip_likelihoods#
		# Convey the tree to the next iteration#
		phy_as_it_is_chopped_down = chainsaw_result$tree_to_chainsaw#
#
		} # End loop through i strata
inputs$list_of_areas_allowed_mats
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs
distsfn = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified/Hawaii_KOMH_distances.txt"
readLines(distsfn)
?readLines
if (!is.null(inputs))#
		{#
		distsfn = inputs$distsfn#
		}#
	if (!is.null(distsfn))#
		{#
		distsfn = distsfn#
		}#
	tmplines = readLines(distsfn)#
	list_of_distances_mats = list()#
	lnum = 1#
	newmat = TRUE#
	for (i in 1:length(tmplines))#
		{#
		print(tmplines[i])#
		if (tmplines[i] == "END")#
			{#
			return(list_of_distances_mats)#
			}#
		if (tmplines[i] == "")#
			{#
			# You've hit the end of a matrix,#
			# increment list and add#
			tmpmat = as.matrix(tmprows)#
			tmpmat = adf2(tmpmat)#
			names(tmpmat) = nameslist#
#
			# Correct distances if any are <= 0#
			# (to ensure consistent behavior of the exponent, i.e. dist ^ -1*(x_exponent)#
			tmpmat = as.matrix(tmpmat)#
			diag(tmpmat) = NA#
			minval = min(tmpmat, na.rm=TRUE)#
 			if (minval <= 0)#
 				{#
 				stop("\n\nERROR: Minimum distance between regions must be > 0")#
 				}#
			list_of_distances_mats[[lnum]] = tmpmat#
			lnum = lnum + 1#
			newmat = TRUE#
			} else {#
			if (newmat == TRUE)#
				{#
				nameslist = strsplit(tmplines[i], split="\t")[[1]]#
				newmat = FALSE#
				tmprows = NULL#
				} else {#
				tmprow = as.numeric(strsplit(tmplines[i], split="\t")[[1]])#
				tmprows = rbind(tmprows, tmprow)#
				}#
			}#
		}#
	list_of_distances_mats
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs
bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.9
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs
bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.9
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
plot(phy)
axisPhylo()
Get the timeperiods; if 1 time period, run once; if multiple, run #
	if (is.null(inputs$timeperiods) || length(inputs$timeperiods) == 1)#
		{#
		num_iterations = 1#
		} else {#
		# Multiple timeperiods#
		timeperiods = inputs$timeperiods#
		num_iterations = length(timeperiods)#
		}#
	# All areas in the total analysis#
	allareas=allareas#
	allareas_list = seq(0, length(allareas)-1, 1)		# 0-base indexes#
#
	# All states in the total analysis (after e.g. limitation on total # of areas)#
	all_states_list=all_states_list	#
	# Other variables#
	BioGeoBEARS_model_object = inputs$BioGeoBEARS_model_object#
	force_sparse = sparse#
	########################################################
	# Set up the starting probabilities etc.#
	########################################################
	# Starting tip_relative_probs_of_each_state#
	current_condlikes_row = 0#
	tip_relative_probs_of_each_state = tip_condlikes_of_data_on_each_state#
	tip_relative_probs_of_each_state#
	current_tip_relative_probs_of_each_state = tip_relative_probs_of_each_state#
	current_condlikes_row = nrow(current_tip_relative_probs_of_each_state)#
	# matrix to hold all of the relative probabilities; Making this purposely too big#
	numnodes = phy$Nnode + length(phy$tip.label)#
	all_relative_probs_of_each_state = matrix(0, ncol=length(all_states_list), nrow=(numnodes*length(timeperiods)))#
	all_condlikes_of_each_state = matrix(0, ncol=length(all_states_list), nrow=(numnodes*length(timeperiods)))#
	all_relative_probs_of_each_state[1:current_condlikes_row, ] = current_tip_relative_probs_of_each_state#
	all_condlikes_of_each_state[1:current_condlikes_row, ] = current_tip_relative_probs_of_each_state#
	########################################################
	# Take the original tree and scale the branchlengths by b (branch-length exponent)#
	# b=0, all branches=1; b=1, all branches normal#
	########################################################
	previous_timepoint = 0#
	original_phy = phy#
	b_branch_length_exponent = inputs$BioGeoBEARS_model_object@params_table["b", "est"]#
	#original_phy$edge.length = original_phy$edge.length ^ b_branch_length_exponent#
	phy_as_it_is_chopped_down = original_phy#
#
	tiplikes_to_delete = list()#
	for (i in 1:num_iterations)#
		{#
		cat("\ni=",i, sep="")#
#
		# Cut down the number of areas, by what is allowed#
		areas_allowed_mat = inputs$list_of_areas_allowed_mats[[i]]#
#
		states_allowed_TF = sapply(X=all_states_list, FUN=check_if_state_is_allowed, areas_allowed_mat)#
		#states_to_use_TF = all_states_list %in% tmp_states_list#
		states_to_use_TF = states_allowed_TF#
		# States allowed in this timeperiod#
		states_list = all_states_list[states_allowed_TF]#
		# Add back NULL range, if needed#
		if (null_range_allowed == TRUE)#
			{#
			states_list = c(NA, states_list)#
			states_to_use_TF[1] = TRUE#
			}#
		# Make the dedf matrix for this time period#
		dispersal_multipliers_matrix = inputs$list_of_dispersal_multipliers_mats[[i]]#
		distances_mat = inputs$list_of_distances_mats[[i]]#
		x_exponent = inputs$BioGeoBEARS_model_object@params_table["x", "est"]#
		dispersal_multipliers_matrix = make_dispersal_multiplier_matrix(areas=allareas, states_list=NULL, dispersal_multipliers_matrix=dispersal_multipliers_matrix, distances_mat=distances_mat, x_exponent=x_exponent)#
		d_current = inputs$BioGeoBEARS_model_object@params_table["d", "est"]#
		dmat = d_current * dispersal_multipliers_matrix#
		#print(dmat)#
		# Calculate the extinction (local extipration) probability multipliers#
		area_of_areas = inputs$list_of_area_of_areas[[i]]#
		# Check elist for 0s#
		if (any(elist <= 0))#
			{#
			stop("ERROR: Minimum distance between regions must be >= 1; correct this.\n\n", sep="")#
			}#
		u_extirpation_exponent = inputs$BioGeoBEARS_model_object@params_table["u", "est"]#
		e_current = inputs$BioGeoBEARS_model_object@params_table["e", "est"]#
		elist = e_current * (area_of_areas ^ (-1 * u_extirpation_exponent))#
		#print(elist)#
		# Calculate the Q matrix#
		# someday we'll have to put "a" (anagenic range-switching) in here...#
		if (is.null(Qmat))#
			{#
			Qmat_tmp = rcpp_states_list_to_DEmat(areas_list=allareas_list, states_list=states_list, dmat=dmat, elist=elist, include_null_range=TRUE, normalize_TF=TRUE, makeCOO_TF=force_sparse)#
			} else {#
			# If Qmat is pre-specified#
			Qmat_tmp = Qmat#
			}#
		# Now. IF you have a subtree structure, you need to run this with a cladogenesis matrix, #
		# through calc_loglike_sp(), like normal.#
		# If there's just one tree, store it in the object#
		if (is.null(inputs$timeperiods) || length(inputs$timeperiods) == 1)#
			{#
			tr = read.tree(inputs$trfn)#
			tree_to_chainsaw = NULL#
			tree_to_chainsaw[[1]] = tr#
#
			return_pieces_list = NULL#
			return_pieces_list[[1]] = tr#
			return_pieces_basenames = NULL#
			return_pieces_basenames[[1]] = paste(sort(tr$tip.label), collapse="|", sep="")#
			chainsaw_object = list()#
			chainsaw_object$tree_to_chainsaw = tree_to_chainsaw#
			chainsaw_object$return_pieces_list = return_pieces_list#
			chainsaw_object$return_pieces_basenames = return_pieces_basenames#
			attr(chainsaw_object, "class") = "chainsaw_result"#
			inputs$tree_sections_list[[1]] = chainsaw_object#
			}#
		# OK, if you have a tree here, do that#
		# if not, exp the branch#
		########################################################
		# Cladogenic model #
		########################################################
		j = BioGeoBEARS_model_object@params_table["j","est"]#
		ysv = BioGeoBEARS_model_object@params_table["ys","est"]#
		v = BioGeoBEARS_model_object@params_table["v","est"]#
		ys = BioGeoBEARS_model_object@params_table["ys","est"]#
		sum_SPweights = ys + j + v#
		maxent_constraint_01 = BioGeoBEARS_model_object@params_table["mx01","est"]#
		# Text version of speciation matrix	#
		maxent_constraint_01v = BioGeoBEARS_model_object@params_table["mx01v","est"]#
		#spPmat = symbolic_to_relprob_matrix_sp(spmat, cellsplit="\\+", mergesym="*", ys=ys, j=j, v=v, maxent_constraint_01=maxent_constraint_01, maxent_constraint_01v=maxent_constraint_01v, max_numareas=max_numareas)#
		# Set the parameter controlling the size distribution of #
		# the smaller descendant species#
		maxent01s_param = BioGeoBEARS_model_object@params_table["mx01s","est"]#
		maxent01v_param = BioGeoBEARS_model_object@params_table["mx01v","est"]#
		maxent01j_param = BioGeoBEARS_model_object@params_table["mx01j","est"]#
		maxent01y_param = BioGeoBEARS_model_object@params_table["mx01y","est"]#
		# Cladogenesis model inputs#
		spPmat_inputs = NULL#
		states_indices = states_list#
		states_indices[1] = NULL	# shorten the states_indices by 1 (cutting the null range state from the speciation matrix)#
		spPmat_inputs$l = states_indices#
		spPmat_inputs$s = ys#
		spPmat_inputs$v = v#
		spPmat_inputs$j = j#
		spPmat_inputs$y = ys#
		spPmat_inputs$dmat = dmat#
		spPmat_inputs$maxent01s_param = maxent01s_param#
		spPmat_inputs$maxent01v_param = maxent01v_param#
		spPmat_inputs$maxent01j_param = maxent01j_param#
		spPmat_inputs$maxent01y_param = maxent01y_param#
		########################################################
		# Go through the tree pieces#
		########################################################
		chainsaw_result = inputs$tree_sections_list[[i]]#
		# You will need the new tip likelihoods of the new tree:#
		current_tip_relative_probs_of_each_state#
		new_tip_likelihoods = matrix(0, nrow=length(chainsaw_result$return_pieces_list), ncol=length(all_states_list))#
#
		for (jj in 1:length(chainsaw_result$return_pieces_list))#
			{#
			cat("\njj=",jj, sep="")#
			treepiece = chainsaw_result$return_pieces_list[[jj]]#
			# If it's jjust a branch section#
			if (is.numeric(treepiece))#
				{#
				tipname = chainsaw_result$return_pieces_basenames[[jj]]#
				tip_TF = phy_as_it_is_chopped_down$tip.label == tipname#
				relative_probs_of_each_state_at_the_tip_of_this_branch = current_tip_relative_probs_of_each_state[tip_TF, states_to_use_TF]#
				# t = treepiece#
				independent_likelihoods_at_branch_section_bottom = expokit_dgpadm_Qmat2(times=treepiece, Qmat=Qmat_tmp,  transpose_needed=TRUE)#
				#independent_likelihoods_at_branch_section_bottom = expokit_dgpadm_Qmat(Qmat=Qmat_tmp,  t=treepiece, transpose_needed=FALSE)#
				conditional_likelihoods_at_branch_section_bottom = matrix(independent_likelihoods_at_branch_section_bottom %*% relative_probs_of_each_state_at_the_tip_of_this_branch, nrow=1)#
				# Test forward exponentiation instead...NO#
				# independent_likelihoods_at_branch_section_bottom = expokit_dgpadm_Qmat2(times=treepiece, Qmat=Qmat_tmp,  transpose_needed=FALSE)#
# 				#independent_likelihoods_at_branch_section_bottom = expokit_dgpadm_Qmat(Qmat=Qmat_tmp,  t=treepiece, transpose_needed=FALSE)#
# 				#
# 				#
# 				conditional_likelihoods_at_branch_section_bottom = matrix(independent_likelihoods_at_branch_section_bottom %*% relative_probs_of_each_state_at_the_tip_of_this_branch, nrow=1)#
# 				conditional_likelihoods_at_branch_section_bottom[1] = 0#
# 				#
				# Also, store the conditional likelihoods for all nodes in this subtree#
				chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]] = conditional_likelihoods_at_branch_section_bottom#
				# Relative probabilities -- jjust the new tip#
				chainsaw_result$relative_probs_of_each_state_at_bottom_of_root_branch[[jj]] = conditional_likelihoods_at_branch_section_bottom / sum(conditional_likelihoods_at_branch_section_bottom)#
				# Relative probabilities -- all nodes plus branch bottom (jjust branch bottom, here)#
				chainsaw_result$relative_probabilities_for_nodes_plus_bottom_in_this_section[[jj]] = conditional_likelihoods_at_branch_section_bottom / sum(conditional_likelihoods_at_branch_section_bottom)#
				} else {#
				# Otherwise, treepiece is a subtree#
				tmp_subtree = treepiece#
				# Get the names of the tips in this subtree#
				tipnames = tmp_subtree$tip.label#
				# Use the tipnames to get the conditional likelihoods at these tips#
				tips_for_subtree_TF = phy_as_it_is_chopped_down$tip.label %in% tipnames#
				subtree_tip_relative_probs_of_each_state = current_tip_relative_probs_of_each_state[tips_for_subtree_TF,states_to_use_TF]#
				# Calculate the likelihoods for this subtree#
				calc_loglike_sp_results = calc_loglike_sp(#
					tip_condlikes_of_data_on_each_state=subtree_tip_relative_probs_of_each_state, #
					phy=tmp_subtree, #
					Qmat=Qmat_tmp, #
					spPmat=NULL,#
					return_what="all",#
					probs_of_states_at_root=NULL,#
					rootedge=TRUE,#
					sparse=FALSE, #
					printlevel=printlevel,#
					use_cpp=TRUE,#
					input_is_COO=FALSE,#
					spPmat_inputs=spPmat_inputs,#
					cppSpMethod=cppSpMethod,#
					cluster_already_open=cluster_already_open,#
					calc_ancprobs=FALSE,#
					null_range_allowed=null_range_allowed,#
					fixnode=NULL,#
					fixlikes=NULL#
					)#
				#chainsaw_result$conditional_likelihoods_at_branch_section_bottom[[jj]] = #
				# Also, store the conditional likelihoods for all nodes in this subtree#
				# MINUS THE GODDAMN TIPS OF THE SUBTREE, THESE ARE ALREADY IN THERE#
				tmp_tipnums = 1:length(tipnames)#
				chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]] = calc_loglike_sp_results$condlikes_of_each_state[-tmp_tipnums, ]#
				# Matrix of tip likelihoods to delete so you don't repeat using them in the total#
				# loglike#
				tiplikes_to_delete[[jj]] = calc_loglike_sp_results$condlikes_of_each_state[tmp_tipnums, ]#
				# Relative probabilities -- all nodes plus branch bottom (jjust branch bottom, here)#
				chainsaw_result$relative_probabilities_for_nodes_plus_bottom_in_this_section[[jj]] = calc_loglike_sp_results$relative_probs_of_each_state_at_branch_top_AT_node_DOWNPASS[-tmp_tipnums, ]#
				# Relative probabilities -- jjust the new tip#
				chainsaw_result$relative_probs_of_each_state_at_bottom_of_root_branch[[jj]] = calc_loglike_sp_results$relative_probs_of_each_state_at_bottom_of_root_branch#
				# ONLY for the nodes in original tree, store the condlikes#
				# Add these to the overall list of conditional likelihoods#
				numrows_to_add = nrow(chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]])#
				startrow = current_condlikes_row + 1#
				endrow = current_condlikes_row + numrows_to_add#
				all_relative_probs_of_each_state[startrow:endrow, states_to_use_TF] = chainsaw_result$relative_probabilities_for_nodes_plus_bottom_in_this_section[[jj]]#
				all_condlikes_of_each_state[startrow:endrow, states_to_use_TF] = chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]]#
#
				current_condlikes_row = current_condlikes_row + numrows_to_add#
				} # End if/then on branch vs. subtree#
			# Also, store the relative probabilities for the new tip#
			#new_tip_likelihoods[jj, states_to_use_TF] = chainsaw_result$relative_probs_of_each_state_at_bottom_of_root_branch[[jj]]#
			new_tip_likelihoods[jj, states_to_use_TF] = chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]][nrow(chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]]), ]#
# Add these to the overall list of conditional likelihoods#
# 			numrows_to_add = nrow(chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]])#
# 			#
# 			startrow = current_condlikes_row + 1#
# 			endrow = current_condlikes_row + numrows_to_add#
# 			all_relative_probs_of_each_state[startrow:endrow, states_to_use_TF] = chainsaw_result$relative_probabilities_for_nodes_plus_bottom_in_this_section[[jj]]#
# 			#
# 			all_condlikes_of_each_state[startrow:endrow, states_to_use_TF] = chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]]#
			#print(chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]])#
			#print(log(sum(chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]])))#
			rowSums(all_condlikes_of_each_state) != 0#
			tmp_all_condlikes_of_each_state = all_condlikes_of_each_state[rowSums(all_condlikes_of_each_state) != 0,]#
			currLnL = sum(log(rowSums(tmp_all_condlikes_of_each_state)))#
			cat("i=", i, "; jj=", jj, "; currLnL=", currLnL, "\n")#
# 			current_condlikes_row = current_condlikes_row + numrows_to_add#
			} # End loop through jj tree pieces WITHIN a stratum#
		# Update for the next loop#
		# Tip likelihoods#
		current_tip_relative_probs_of_each_state = new_tip_likelihoods#
		# Store previous round#
		#old_phy_as_it_is_chopped_down = phy_as_it_is_chopped_down#
		#old_chainsaw_result = chainsaw_result#
		#old_new_tip_likelihoods = new_tip_likelihoods#
		# Convey the tree to the next iteration#
		phy_as_it_is_chopped_down = chainsaw_result$tree_to_chainsaw#
#
		} # End loop through i strata
i
jj
startrow:endrow
startrow
endrow
current_condlikes_row
numrows_to_add
chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]]
nrow(chainsaw_result$conditional_likelihoods_for_nodes_plus_bottom_in_this_section[[jj]])
matrix()
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
matrix()
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=FALSE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
bears_strat_run = bears_optim_run(BioGeoBEARS_run_object = inputs)
bears_strat_run
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL#
bears_2param_standard_fast_result$optim_result#
bears_strat_run = bears_optim_run(BioGeoBEARS_run_object = inputs)
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL
Run a stratified analysis#
########################################################
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_basics_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_LaplacesDemon_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_stratified_v1.R', chdir = TRUE)#
########################################################
# Set up data#
########################################################
wd = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples/Psychotria_dists_stratified_M0/"	# get working directory, store in wd#
setwd(wd)		# set working directory#
#
# Here, I am using the practice files inside the R package;#
# you can use your own#
# Normally#
#extdata_dir = system.file("extdata", package="BioGeoBEARS")#
# tmp hard code NICK FIX: #
# extdata_dir = "/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/"#
inputs = define_BioGeoBEARS_run()#
inputs#
#
# Input the files#
inputs$trfn = "Psychotria_5.2.newick"#
inputs$geogfn = "Psychotria_geog.data"#
inputs$timesfn = "Hawaii_timeperiods.txt"#
inputs$distsfn = "Hawaii_KOMH_distances.txt"								# distance between areas, for dispersal ~ dist^x#
inputs$dispersal_multipliers_fn = "Hawaii_KOMH_dispersal_multipliers.txt"	# hard-coded dispersal multiplier (or 0s/1s for constraints)#
inputs$area_of_areas_fn = "Hawaii_KOMH_area_of_areas.txt"					# area of each areas (for extinction ~ area^u)#
inputs$areas_allowed_fn = "Hawaii_KOMH_areas_allowed.txt"				# if ONLY connected areas are allowed#
#
inputs = readfiles_BioGeoBEARS_run(inputs)#
inputs#
#bears_2param_standard_fast_result = bears_2param_standard_fast(trfn=inputs$trfn, geogfn=inputs$geogfn)#
bears_2param_standard_fast_result$optim_result#
# Set d and e#
inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.03506336#
inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.02847676#
#
#inputs$BioGeoBEARS_model_object@params_table["d", "est"] = 0.02#
#inputs$BioGeoBEARS_model_object@params_table["e", "est"] = 0.214#
# Section the tree in inputs:#
inputs = section_the_tree(inputs)#
#inputs$tree_sections_list#
#
#9.942 + 25.146#
maxareas = 4#
phy = read.tree(inputs$trfn)#
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=inputs$geogfn)#
tip_condlikes_of_data_on_each_state = tipranges_to_tip_condlikes_of_data_on_each_state(tipranges, phy, maxareas=maxareas)#
#
allareas = getareas_from_tipranges_object(tipranges)#
all_states_list = rcpp_areas_list_to_states_list(areas=allareas, include_null_range=TRUE, maxareas=maxareas)#
tmpLnL = calc_loglike_sp_stratified(tip_condlikes_of_data_on_each_state, phy, Qmat=NULL, spPmat=NULL, min_branchlength=1e-21, return_what="loglike", probs_of_states_at_root=NULL, rootedge=TRUE, sparse=FALSE, printlevel=0, use_cpp=TRUE, input_is_COO=FALSE, spPmat_inputs=NULL, cppSpMethod=3, cluster_already_open=NULL, calc_ancprobs=FALSE, null_range_allowed=TRUE, fixnode=NULL, fixlikes=NULL, inputs=inputs, allareas=allareas, all_states_list=all_states_list)#
#
tmpLnL#
bears_2param_standard_fast_result$optim_result#
bears_strat_run = bears_optim_run(BioGeoBEARS_run_object = inputs)
16^2
32^2
4^3
4*4*4
3^3
8^3
16^3
32^3
7*49
3^3
15^3
31^3
64^2
128^2
63^3
127^3
define_BioGeoBEARS_model_object
define_BioGeoBEARS_model_object()
library(LaplacesDemon)#
library(BioGeoBEARS)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_classes_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_univ_model_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_readwrite_v1.R', chdir = TRUE)#
source('/Dropbox/_njm/__packages/BioGeoBEARS_setup/calc_loglike_sp_v01.R', chdir = TRUE)#
# Load the 2-parameter model#
load(file="/Dropbox/_njm/__packages/BioGeoBEARS_setup/_examples/2_ReParam_RWM_logistic.Rdata")#
load(file="/Dropbox/_njm/__packages/BioGeoBEARS_setup/_examples/2_ReParam_RWM_logistic.MyData")#
#
oldFit = Fit#
Fit = reparam_LapDem_output(oldFit, MyData)#
Fit#
Fit$DIC1#
Fit$DIC2#
Fit$Posterior1_iszero#
Fit$Posterior2_iszero#
#
Fit_2param = Fit#
# Load the 3-parameter model#
load(file="/Dropbox/_njm/__packages/BioGeoBEARS_setup/_examples/3_ReParam_RWM_logistic.Rdata")#
load(file="/Dropbox/_njm/__packages/BioGeoBEARS_setup/_examples/3_ReParam_RWM_logistic.MyData")#
#
oldFit = Fit#
Fit = reparam_LapDem_output(oldFit, MyData)#
Fit#
Fit$DIC1#
Fit$DIC2#
Fit$Posterior1_iszero#
Fit$Posterior2_iszero#
#
Fit_3param = Fit#
# Get the LMLs #
# (LML = Log-Marginal Likelihood)#
#  At least 301 stationary samples are required, and the number of parameters#
# cannot exceed half the number of stationary samples.#
#
# Cut out the burnin#
numsamps = nrow(Fit_2param$Posterior1)#
burnin = 0.1 * numsamps#
numthinned = 500#
nums = round(seq(from=burnin, to=numsamps, length.out=numthinned))#
nums#
#
LML_2param = LML(Model=NULL, Data=NULL, Modes=NULL, theta=Fit_2param$Posterior1[nums,], LL=Fit_2param$Monitor[nums,"LnL"], method="NSIS")#
LML_2param#
Fit_2param$LML = LML_2param$LML#
#
LML_3param = LML(Model=NULL, Data=NULL, Modes=NULL, theta=Fit_3param$Posterior1[nums,], LL=Fit_3param$Monitor[nums,"LnL"], method="NSIS")#
LML_3param#
Fit_3param$LML = LML_3param$LML#
BayesFactor(x=list(Fit_2param, Fit_3param))#
BayesFactor(x=list(Fit_3param, Fit_2param))
?LML
Fit
Fit_3param
plot(Fit_2param)
plot(oldFit)
MargLikArrogance
install.packages("MargLikArrogance")
LML_3param$LML
LML_3param$LML
LML_2param$LML
LML_2param$LML.
BayesFactor(x=list(Fit_3param, Fit_2param))
